doctype html
html(lang='en')
    head
        meta(charset='utf-8')
        meta(name='viewport', content='width=device-width, initial-scale=1.0')
        each css in ['code', 'fonts', 'scrollbar', 'base', 'main', 'heading', 'list', 'link', 'catalogue', 'desktop', 'atelier-lakeside-light']
            link(rel='stylesheet', type='text/css', href='../../style/' + css + '.css')
        link(rel='stylesheet', type='text/css', href='../shared/css/style.css')
        each dependency in dependencies
            script(type='text/javascript', src='../../js/' + dependency.lib + '.' + dependency.version + '.min.js')
        script(type='text/javascript', src='../../js/lib/highlight.min.js')
        script(type='text/javascript', src='../../dl/dalian.min.js')
        title Multiple types | tutorials
    body
        main
            .main-content-centered
                h1 Multiple types
                p In this tutorial we learn how to use the axis components in a smart way to emulate having multiple chart types on one chart.

                h2 Data
                p In this example, we use the monthly sea surface temperature anomaly from the #[a(href="https://www.metoffice.gov.uk/hadobs/hadsst4/data/download.html") Met Office Hadley Center].
                  |  Loading and parsing the data with the Fetch API is fairly straightforward as it comes in a CSV containing numbers only (the data is copied as a Github Gist):
                pre
                    code.hljs.javascript.
                        const URL = 'https://gist.githubusercontent.com/synesenom/38f6ac1567aab8dba68b0dbf476d8a71/raw/monthly-temperature-anomaly.csv'

                        (async () => {
                          // Fetch our data.
                          const raw = await fetch(URL)
                            .then(response => response.text())
                          const data = raw.split('\n')
                            .map(d => {
                              // For this guide's purpose, let's extract the year and anomaly
                              // value only.
                              const cols = d.split(',')
                              return {
                                x: +cols[0],
                                y: +cols[2]
                              }
                            })
                        })()

                p A sample of what the file would be seen by Javascript:
                pre.data.
                    [
                        {x: 1850, y: -0.35138},
                        {x: 1850, y: -0.34437},
                        {x: 1850, y: -0.58001},
                        {x: 1850, y: -0.34222},
                        {x: 1850, y: -0.25093},
                        ...
                    ]
                p Note that there are no columns in the CSV file uploaded to Gist, so we simply take the first (0) and third (2) columns.

                h2 The scatter plot
                p We start with a scatter plot showing all anomaly values for each year.
                  |  Following the #[a(href="https://synesenom.github.io/dalian/catalogue/charts/scatter-plot/") example] in the catalogue:

                pre
                    code.hljs.javascript.
                        // Add scatter plot.
                        const scatter = dalian.ScatterPlot('scatter-plot', '#chart')
                        // We have a single data set in this plot.
                        .data([{
                            name: 'monthly',
                            values
                        }])

                        // Read dimensions from the container.
                        .width(parseFloat(d3.select('#chart').style('width')))
                        .height(parseFloat(d3.select('#chart').style('padding-bottom')))
                        .margins(50)

                        // Set color to grayish, add some opacity and set dot size.
                        .color.palette('#789')
                        .opacity(0.1)
                        .size(4)

                        // Set up axes.
                        .leftAxis.label('Time [year]')
                        .bottomAxis.label('Anomaly [%]')

                        // Render chart.
                        .render()

                .chart-container#chart-step-1
                script
                    include steps/step-1.js

                h2 The line plot
                p Now we add a trend to the scatter plot which is the average of the measurements in each year.
                  |  First, we need to calculate the trend, using #[code d3.nest]:
                pre
                    code.hljs.javascript.
                        const trend = d3.nest()
                            .key(d => d.x)
                            .rollup(v => d3.mean(v, d => d.y))
                            .entries(data)
                            .map(d => Object.assign(d.value, {
                                x: +d.key,
                                y: d.value
                            }))

                p This trend data is directly plottable with dalian:
                pre
                    code.hljs.javascript.
                        const line = dalian.LineChart('trend', '#chart')
                        .data([{
                          name: 'trend',
                          values: trend
                        }])
                        .width(parseFloat(d3.select('#chart').style('width')))
                        .height(parseFloat(d3.select('#chart').style('padding-bottom')))
                        .margins(50)

                        // Set color.
                        .color.palette('firebrick')

                        .render()

                .chart-container#chart-step-2
                script
                    include steps/step-2.js

                p Note how we didn't set any axis labels for the line chart.

                h2 Adjustments
                p As we can see, the axes are not quite aligned...
                  |  This is because we applied the default axis settings which are adjusted differently for each chart.
                  |  For instance, the scatter plot compresses the axis such that each circle fits in.
                  |  In order to fix this, we just need to set the axis range manually, from the data.
                  |  Let's calculate the range for that:
                pre
                    code.hljs.javascript.
                        const rangeX = d3.extent(trend, d => d.x)
                        const rangeY = d3.extent(trend, d => d.y)

                p And with that, we can set hard ranges to the scatter and line plots:
                pre
                    code.hljs.javascript.
                        scatter.xRange.min(rangeX[0])
                            .xRange.max(rangeX[1])
                            .yRange.min(rangeY[0])
                            .yRange.max(rangeY[1])
                            .yRange.compressMin(0.1)
                            .yRange.compressMax(0.1)
                            .render()
                        line.xRange.min(rangeX[0])
                            .xRange.max(rangeX[1])
                            .yRange.min(rangeY[0])
                            .yRange.max(rangeY[1])
                            .yRange.compressMin(0.1)
                            .yRange.compressMax(0.1)
                            .render()

                p Since #[code .yRange.min] and #[code .yRange.max] overwrite the default axes, we still want to have some buffer to contain all circles using #[code .yRange.compressMin] and #[code .yRange.compressMax]

                .chart-container#chart-step-3
                script
                    include steps/step-3.js

                h2 Last touches
                p We are basically done with the last step.
                  |  However, there are still some unnecessary elements there: the axis lines and ticks for the line chart.
                  |  In the last step we remove those useless axis elements:
                pre
                    code.hljs.javascript.
                        line.leftAxis.hideAxisLine(true)
                            .leftAxis.hideTicks(true)
                            .leftAxis.label('')
                            .bottomAxis.hideAxisLine(true)
                            .bottomAxis.hideTicks(true)
                            .bottomAxis.label('')
                            .render()
                .chart-container#chart-step-4
                script
                    include steps/step-4.js

                h2 Final remarks
                p In order to make the steps in this tutorial isolated, we called #[code .render] after re-adjusting the ranges.
                    |  Note that this is not needed and we could just as well pre-calculate the range in the beginning and apply all the adjustments right away sparing some calls to #[code .render].

                h2 Final script
                p #[a(href="final-example.html") Here] you can download the full working example as a stand-alone HTML file.

    script
        include ../shared/js/common.js
